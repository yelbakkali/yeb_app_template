@echo off
:: ==========================================================================
:: R√âF√âRENCES CROIS√âES:
:: - Ce fichier est cr√©√© pour √™tre utilis√© par les scripts d'installation Windows
:: ==========================================================================

:: Script de v√©rification et configuration Git pour Windows
:: Ce script v√©rifie si Git est correctement configur√© (user.name et user.email)
:: et aide l'utilisateur √† configurer Git si n√©cessaire

setlocal enabledelayedexpansion

:: Couleurs pour les messages (codes ANSI m√™me sous Windows 10+)
set "RED=[91m"
set "GREEN=[92m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "BOLD=[1m"
set "NC=[0m"

:: Fonctions utilitaires
:echo_info
echo %BLUE%%BOLD%[INFO]%NC% %*
goto :eof

:echo_success
echo %GREEN%%BOLD%[SUCC√àS]%NC% %*
goto :eof

:echo_warning
echo %YELLOW%%BOLD%[AVERTISSEMENT]%NC% %*
goto :eof

:echo_error
echo %RED%%BOLD%[ERREUR]%NC% %*
goto :eof

:: Fonction principale
:main
call :check_git_config
if %ERRORLEVEL% equ 0 (
    call :ask_setup_github
)
goto :eof

:: Fonction pour v√©rifier si Git est correctement configur√©
:check_git_config
call :echo_info "V√©rification de la configuration Git..."

:: V√©rifier si Git est install√©
where git >nul 2>&1
if %ERRORLEVEL% neq 0 (
    call :echo_error "Git n'est pas install√© sur votre syst√®me."
    call :echo_info "Veuillez installer Git avant de continuer: https://git-scm.com/download/win"
    exit /b 1
)

:: V√©rifier si user.name est configur√©
for /f "tokens=*" %%a in ('git config --global user.name') do set "GIT_USER_NAME=%%a"
if "!GIT_USER_NAME!"=="" (
    call :echo_warning "Git user.name n'est pas configur√©."
    call :echo_info "Configuration de Git user.name..."
    
    set /p "git_name=Entrez votre nom pour Git (ex: John Doe) : "
    if "!git_name!"=="" (
        call :echo_error "Aucun nom fourni. Configuration incompl√®te."
        exit /b 1
    )
    
    git config --global user.name "!git_name!"
    call :echo_success "Git user.name configur√© : !git_name!"
) else (
    call :echo_success "Git user.name d√©j√† configur√© : !GIT_USER_NAME!"
)

:: V√©rifier si user.email est configur√©
for /f "tokens=*" %%a in ('git config --global user.email') do set "GIT_USER_EMAIL=%%a"
if "!GIT_USER_EMAIL!"=="" (
    call :echo_warning "Git user.email n'est pas configur√©."
    call :echo_info "Configuration de Git user.email..."
    
    set /p "git_email=Entrez votre email pour Git (ex: john.doe@example.com) : "
    if "!git_email!"=="" (
        call :echo_error "Aucun email fourni. Configuration incompl√®te."
        exit /b 1
    )
    
    git config --global user.email "!git_email!"
    call :echo_success "Git user.email configur√© : !git_email!"
) else (
    call :echo_success "Git user.email d√©j√† configur√© : !GIT_USER_EMAIL!"
)

:: V√©rifier si la configuration par d√©faut de la branche est correcte
for /f "tokens=*" %%a in ('git config --global init.defaultBranch') do set "GIT_INIT_DEFAULT_BRANCH=%%a"
if "!GIT_INIT_DEFAULT_BRANCH!"=="" (
    call :echo_info "Configuration de la branche par d√©faut √† 'main'..."
    git config --global init.defaultBranch main
    call :echo_success "Branche par d√©faut configur√©e √† 'main'"
) else if "!GIT_INIT_DEFAULT_BRANCH!" neq "main" (
    call :echo_info "La branche par d√©faut est actuellement '!GIT_INIT_DEFAULT_BRANCH!'."
    call :echo_info "Pour ce projet, nous recommandons 'main'."
    set /p "change_branch=Voulez-vous changer la branche par d√©faut √† 'main'? (o/n) : "
    if /I "!change_branch!"=="o" (
        git config --global init.defaultBranch main
        call :echo_success "Branche par d√©faut modifi√©e √† 'main'"
    ) else (
        call :echo_warning "Vous avez choisi de conserver '!GIT_INIT_DEFAULT_BRANCH!' comme branche par d√©faut."
    )
) else (
    call :echo_success "Branche par d√©faut d√©j√† configur√©e √† 'main'"
)

call :echo_success "Configuration Git v√©rifi√©e avec succ√®s!"
exit /b 0

:: Demande √† l'utilisateur s'il souhaite configurer un d√©p√¥t GitHub
:ask_setup_github
call :echo_info "Souhaitez-vous cr√©er un d√©p√¥t GitHub et le connecter √† ce projet?"
set /p "create_github=Cr√©er un d√©p√¥t GitHub? (o/n) : "
if /I "!create_github!"=="o" (
    call :setup_github_repository
) else (
    call :echo_info "Vous avez choisi de ne pas cr√©er de d√©p√¥t GitHub."
    call :echo_info "Vous pourrez le faire plus tard manuellement avec les commandes:"
    echo 1. Cr√©ez un d√©p√¥t vide sur GitHub
    echo 2. git remote add origin https://github.com/VOTRE_NOM/VOTRE_REPO.git
    echo 3. git push -u origin main
    echo 4. git checkout -b dev ^&^& git push -u origin dev
)
goto :eof

:: Fonction pour cr√©er un d√©p√¥t GitHub et le connecter au d√©p√¥t local
:setup_github_repository
call :echo_info "Configuration du d√©p√¥t GitHub..."

:: V√©rifier si le projet est d√©j√† un d√©p√¥t Git
if not exist ".git" (
    call :echo_warning "Ce dossier n'est pas un d√©p√¥t Git."
    call :echo_info "Initialisation du d√©p√¥t Git..."
    git init
    call :echo_success "D√©p√¥t Git initialis√© localement."
)

:: Demander les informations pour le d√©p√¥t GitHub
set /p "github_username=Nom d'utilisateur GitHub : "
if "!github_username!"=="" (
    call :echo_error "Aucun nom d'utilisateur fourni. Impossible de cr√©er le d√©p√¥t GitHub."
    exit /b 1
)

set /p "github_repo=Nom du d√©p√¥t GitHub : "
if "!github_repo!"=="" (
    call :echo_error "Aucun nom de d√©p√¥t fourni. Impossible de cr√©er le d√©p√¥t GitHub."
    exit /b 1
)

set /p "github_description=Description du d√©p√¥t (optionnelle) : "

set /p "is_private=D√©p√¥t priv√©? (o/n) : "
if /I "!is_private!"=="o" (
    set "private_flag=--private"
) else (
    set "private_flag=--public"
)

call :echo_warning "Pour cr√©er un d√©p√¥t GitHub, vous devez √™tre authentifi√© avec un token."
call :echo_info "Si vous n'avez pas de token GitHub CLI, suivez ces √©tapes:"
echo 1. Installez GitHub CLI (gh): https://cli.github.com/manual/installation
echo 2. Ex√©cutez 'gh auth login' et suivez les instructions

:: V√©rifier si GitHub CLI est install√©
where gh >nul 2>&1
if %ERRORLEVEL% neq 0 (
    call :echo_error "GitHub CLI (gh) n'est pas install√©."
    call :echo_info "Installation de GitHub CLI..."
    call :echo_info "T√©l√©chargement de GitHub CLI..."
    
    :: V√©rifier si winget est disponible
    where winget >nul 2>&1
    if %ERRORLEVEL% equ 0 (
        winget install -e --id GitHub.cli
    ) else (
        call :echo_error "Impossible d'installer GitHub CLI automatiquement."
        call :echo_info "Veuillez l'installer manuellement depuis: https://cli.github.com/"
        call :echo_info "Vous pourrez cr√©er le d√©p√¥t manuellement plus tard."
        exit /b 1
    )
)

:: V√©rifier si l'utilisateur est authentifi√© avec GitHub CLI
gh auth status >nul 2>&1
if %ERRORLEVEL% neq 0 (
    call :echo_warning "Vous n'√™tes pas authentifi√© avec GitHub CLI."
    call :echo_info "Veuillez vous authentifier maintenant..."
    
    gh auth login
    
    if %ERRORLEVEL% neq 0 (
        call :echo_error "√âchec de l'authentification GitHub CLI."
        call :echo_info "Vous pourrez cr√©er le d√©p√¥t manuellement plus tard."
        exit /b 1
    )
)

:: Cr√©er le d√©p√¥t sur GitHub
call :echo_info "Cr√©ation du d√©p√¥t GitHub '!github_username!/!github_repo!'..."
if "!github_description!" neq "" (
    gh repo create "!github_username!/!github_repo!" !private_flag! --description "!github_description!" --confirm
) else (
    gh repo create "!github_username!/!github_repo!" !private_flag! --confirm
)

if %ERRORLEVEL% neq 0 (
    call :echo_error "√âchec de la cr√©ation du d√©p√¥t GitHub."
    call :echo_info "Vous pourrez cr√©er le d√©p√¥t manuellement plus tard."
    exit /b 1
)

call :echo_success "D√©p√¥t GitHub cr√©√© avec succ√®s!"

:: Ajouter le remote et pousser vers GitHub
call :echo_info "Configuration du remote GitHub..."
git remote add origin "https://github.com/!github_username!/!github_repo!.git"

:: Cr√©er un premier commit s'il n'y en a pas
git log -1 >nul 2>&1
if %ERRORLEVEL% neq 0 (
    call :echo_info "Cr√©ation d'un commit initial..."
    git add .
    git commit -m "üöÄ Initial commit"
)

:: Renommer la branche principale en main si n√©cessaire
for /f "tokens=*" %%b in ('git branch --show-current') do set "current_branch=%%b"
if "!current_branch!" neq "main" (
    call :echo_info "Renommage de la branche '!current_branch!' en 'main'..."
    git branch -m "!current_branch!" main
)

:: Pousser vers GitHub
call :echo_info "Envoi du code vers GitHub (branche main)..."
git push -u origin main
if %ERRORLEVEL% neq 0 (
    call :echo_error "√âchec de l'envoi vers GitHub."
    call :echo_info "Vous pourrez pousser le code manuellement plus tard avec 'git push -u origin main'"
    exit /b 1
)

:: Cr√©er et pousser la branche dev
call :echo_info "Cr√©ation de la branche de d√©veloppement 'dev'..."
git checkout -b dev

call :echo_info "Envoi de la branche 'dev' vers GitHub..."
git push -u origin dev
if %ERRORLEVEL% neq 0 (
    call :echo_error "√âchec de l'envoi de la branche 'dev' vers GitHub."
    call :echo_info "Vous pourrez pousser la branche manuellement plus tard avec 'git push -u origin dev'"
    exit /b 1
)

call :echo_success "D√©p√¥t GitHub configur√© avec succ√®s!"
call :echo_info "URL du d√©p√¥t: https://github.com/!github_username!/!github_repo!"
call :echo_info "Branche principale: main (stable)"
call :echo_info "Branche de d√©veloppement: dev (active)"

exit /b 0

:: Si le script est ex√©cut√© directement, lancer la fonction principale
:start
call :main
exit /b