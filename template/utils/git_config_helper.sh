#!/bin/bash
# ==========================================================================
# R√âF√âRENCES CROIS√âES:
# - Ce fichier est cr√©√© pour √™tre utilis√© par les scripts d'installation
# ==========================================================================

# Script de v√©rification et configuration Git
# Ce script v√©rifie si Git est correctement configur√© (user.name et user.email)
# et aide l'utilisateur √† configurer Git si n√©cessaire

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Fonctions utilitaires
echo_info() {
    echo -e "${BLUE}${BOLD}[INFO]${NC} $1"
}

echo_success() {
    echo -e "${GREEN}${BOLD}[SUCC√àS]${NC} $1"
}

echo_warning() {
    echo -e "${YELLOW}${BOLD}[AVERTISSEMENT]${NC} $1"
}

echo_error() {
    echo -e "${RED}${BOLD}[ERREUR]${NC} $1"
}

# Fonction pour v√©rifier si Git est correctement configur√©
check_git_config() {
    echo_info "V√©rification de la configuration Git..."

    # V√©rifier si Git est install√©
    if ! command -v git &> /dev/null; then
        echo_error "Git n'est pas install√© sur votre syst√®me."
        echo_info "Veuillez installer Git avant de continuer."
        return 1
    fi

    # V√©rifier si user.name est configur√©
    GIT_USER_NAME=$(git config --global user.name)
    if [ -z "$GIT_USER_NAME" ]; then
        echo_warning "Git user.name n'est pas configur√©."
        echo_info "Configuration de Git user.name..."

        read -p "Entrez votre nom pour Git (ex: John Doe) : " git_name
        if [ -z "$git_name" ]; then
            echo_error "Aucun nom fourni. Configuration incompl√®te."
            return 1
        fi

        git config --global user.name "$git_name"
        echo_success "Git user.name configur√© : $git_name"
    else
        echo_success "Git user.name d√©j√† configur√© : $GIT_USER_NAME"
    fi

    # V√©rifier si user.email est configur√©
    GIT_USER_EMAIL=$(git config --global user.email)
    if [ -z "$GIT_USER_EMAIL" ]; then
        echo_warning "Git user.email n'est pas configur√©."
        echo_info "Configuration de Git user.email..."

        read -p "Entrez votre email pour Git (ex: john.doe@example.com) : " git_email
        if [ -z "$git_email" ]; then
            echo_error "Aucun email fourni. Configuration incompl√®te."
            return 1
        fi

        git config --global user.email "$git_email"
        echo_success "Git user.email configur√© : $git_email"
    else
        echo_success "Git user.email d√©j√† configur√© : $GIT_USER_EMAIL"
    fi

    # V√©rifier si la configuration par d√©faut de la branche est correcte
    GIT_INIT_DEFAULT_BRANCH=$(git config --global init.defaultBranch)
    if [ -z "$GIT_INIT_DEFAULT_BRANCH" ]; then
        echo_info "Configuration de la branche par d√©faut √† 'main'..."
        git config --global init.defaultBranch main
        echo_success "Branche par d√©faut configur√©e √† 'main'"
    elif [ "$GIT_INIT_DEFAULT_BRANCH" != "main" ]; then
        echo_info "La branche par d√©faut est actuellement '$GIT_INIT_DEFAULT_BRANCH'."
        echo_info "Pour ce projet, nous recommandons 'main'."
        read -p "Voulez-vous changer la branche par d√©faut √† 'main'? (o/n) : " change_branch
        if [[ "$change_branch" =~ ^[oO]$ ]]; then
            git config --global init.defaultBranch main
            echo_success "Branche par d√©faut modifi√©e √† 'main'"
        else
            echo_warning "Vous avez choisi de conserver '$GIT_INIT_DEFAULT_BRANCH' comme branche par d√©faut."
        fi
    else
        echo_success "Branche par d√©faut d√©j√† configur√©e √† 'main'"
    fi

    echo_success "Configuration Git v√©rifi√©e avec succ√®s!"
    return 0
}

# Fonction pour cr√©er un d√©p√¥t GitHub et le connecter au d√©p√¥t local
setup_github_repository() {
    echo_info "Configuration du d√©p√¥t GitHub..."

    # V√©rifier si le projet est d√©j√† un d√©p√¥t Git
    if [ ! -d ".git" ]; then
        echo_warning "Ce dossier n'est pas un d√©p√¥t Git."
        echo_info "Initialisation du d√©p√¥t Git..."
        git init
        echo_success "D√©p√¥t Git initialis√© localement."
    fi

    # Demander √† l'utilisateur s'il souhaite cr√©er un d√©p√¥t GitHub
    echo_info "Souhaitez-vous cr√©er un d√©p√¥t GitHub et le connecter √† ce projet?"
    read -p "Cr√©er un d√©p√¥t GitHub? (o/n) : " create_github
    if [[ ! "$create_github" =~ ^[oO]$ ]]; then
        echo_info "Vous avez choisi de ne pas cr√©er de d√©p√¥t GitHub."
        echo_info "Vous pourrez le faire plus tard manuellement avec les commandes:"
        echo "1. Cr√©ez un d√©p√¥t vide sur GitHub"
        echo "2. git remote add origin https://github.com/VOTRE_NOM/VOTRE_REPO.git"
        echo "3. git push -u origin main"
        echo "4. git checkout -b dev && git push -u origin dev"
        return 0
    fi

    # Demander les informations pour le d√©p√¥t GitHub
    read -p "Nom d'utilisateur GitHub : " github_username
    if [ -z "$github_username" ]; then
        echo_error "Aucun nom d'utilisateur fourni. Impossible de cr√©er le d√©p√¥t GitHub."
        return 1
    fi

    read -p "Nom du d√©p√¥t GitHub : " github_repo
    if [ -z "$github_repo" ]; then
        echo_error "Aucun nom de d√©p√¥t fourni. Impossible de cr√©er le d√©p√¥t GitHub."
        return 1
    fi

    read -p "Description du d√©p√¥t (optionnelle) : " github_description

    read -p "D√©p√¥t priv√©? (o/n) : " is_private
    if [[ "$is_private" =~ ^[oO]$ ]]; then
        private_flag="--private"
    else
        private_flag="--public"
    fi

    echo_warning "Pour cr√©er un d√©p√¥t GitHub, vous devez √™tre authentifi√© avec un token."
    echo_info "Si vous n'avez pas de token GitHub CLI, suivez ces √©tapes:"
    echo "1. Installez GitHub CLI (gh): https://cli.github.com/manual/installation"
    echo "2. Ex√©cutez 'gh auth login' et suivez les instructions"

    # V√©rifier si GitHub CLI est install√©
    if ! command -v gh &> /dev/null; then
        echo_error "GitHub CLI (gh) n'est pas install√©."
        echo_info "Veuillez installer GitHub CLI pour cr√©er automatiquement le d√©p√¥t:"
        echo "- Sur Linux: sudo apt install gh"
        echo "- Sur macOS: brew install gh"
        echo "- Sur Windows: winget install -e --id GitHub.cli"
        echo_info "Vous pourrez cr√©er le d√©p√¥t manuellement plus tard."
        return 1
    fi

    # V√©rifier si l'utilisateur est authentifi√© avec GitHub CLI
    if ! gh auth status &> /dev/null; then
        echo_warning "Vous n'√™tes pas authentifi√© avec GitHub CLI."
        echo_info "Veuillez vous authentifier maintenant..."

        gh auth login

        if [ $? -ne 0 ]; then
            echo_error "√âchec de l'authentification GitHub CLI."
            echo_info "Vous pourrez cr√©er le d√©p√¥t manuellement plus tard."
            return 1
        fi
    fi

    # Cr√©er le d√©p√¥t sur GitHub
    echo_info "Cr√©ation du d√©p√¥t GitHub '$github_username/$github_repo'..."
    if [ -n "$github_description" ]; then
        gh repo create "$github_username/$github_repo" $private_flag --description "$github_description" --confirm
    else
        gh repo create "$github_username/$github_repo" $private_flag --confirm
    fi

    if [ $? -ne 0 ]; then
        echo_error "√âchec de la cr√©ation du d√©p√¥t GitHub."
        echo_info "Vous pourrez cr√©er le d√©p√¥t manuellement plus tard."
        return 1
    fi

    echo_success "D√©p√¥t GitHub cr√©√© avec succ√®s!"

    # Ajouter le remote et pousser vers GitHub
    echo_info "Configuration du remote GitHub..."
    git remote add origin "https://github.com/$github_username/$github_repo.git"

    # Cr√©er un premier commit s'il n'y en a pas
    if ! git log -1 &> /dev/null; then
        echo_info "Cr√©ation d'un commit initial..."
        git add .
        git commit -m "üöÄ Initial commit"
    fi

    # Renommer la branche principale en main si n√©cessaire
    current_branch=$(git branch --show-current)
    if [ "$current_branch" != "main" ]; then
        echo_info "Renommage de la branche '$current_branch' en 'main'..."
        git branch -m "$current_branch" main
    fi

    # Pousser vers GitHub
    echo_info "Envoi du code vers GitHub (branche main)..."
    if ! git push -u origin main; then
        echo_error "√âchec de l'envoi vers GitHub."
        echo_info "Vous pourrez pousser le code manuellement plus tard avec 'git push -u origin main'"
        return 1
    fi

    # Cr√©er et pousser la branche dev
    echo_info "Cr√©ation de la branche de d√©veloppement 'dev'..."
    git checkout -b dev

    echo_info "Envoi de la branche 'dev' vers GitHub..."
    if ! git push -u origin dev; then
        echo_error "√âchec de l'envoi de la branche 'dev' vers GitHub."
        echo_info "Vous pourrez pousser la branche manuellement plus tard avec 'git push -u origin dev'"
        return 1
    fi

    echo_success "D√©p√¥t GitHub configur√© avec succ√®s!"
    echo_info "URL du d√©p√¥t: https://github.com/$github_username/$github_repo"
    echo_info "Branche principale: main (stable)"
    echo_info "Branche de d√©veloppement: dev (active)"

    return 0
}

# Ex√©cuter les fonctions si ce script est appel√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    check_git_config
    setup_github_repository
fi
